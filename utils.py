import ctypes
import os
import subprocess
import sys


def check_output(expected_output, action):
    # TODO for each action, check output accordingly
    f = open(path_to_script, "r")


def get_path_to_script():
    current_dir = os.getcwd()
    return str(current_dir + "\Output\script.ps1")


def get_path_to_output():
    current_dir = os.getcwd()
    return str(current_dir + "\Output\output.tmp")


def write_powershell_prefix():
    with open(path_to_script, 'a') as f:
        f.write("Set-ExecutionPolicy RemoteSigned\n")


def write_powershell_sufix():
    with open(path_to_script, 'a') as f:
        f.write("Exit\n")
        f.write("Set-ExecutionPolicy Restricted\n")


def write_to_script(string_to_write, step_id, command):
    arg_string = "$step_" + str(step_id)
    with open(path_to_script, 'a') as f:
        f.write(arg_string + " = " + "$null;\n")
        f.write(arg_string + " = " + string_to_write + '\n')
        # f.write(arg_string + " = " + arg_string+".Trim()\n")
        f.write("If (" + arg_string + " -ne $null)\n{\n")
        if command == "CHECK_VERSION":
            f.write(arg_string + " >> \".\\Output\\output.tmp\"\n")
        elif command == "READ_REGISTRY":
            f.write("echo True" + " >> \".\\Output\\output.tmp\"\n")

        f.write("}\nElse\n{\n")
        if command == "CHECK_VERSION":
            f.write("echo null >> \".\\Output\\output.tmp\"\n}\n\n")
        elif command == "READ_REGISTRY":
            f.write("echo False >> \".\\Output\\output.tmp\"\n}\n\n")



def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


# Run python script as administrator
def runPythonAsAdmin():
    if is_admin():
        runPowershellScript()
    else:
        # Re-run the program with admin rights
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)


# Run the script
def runPowershellScript():
    # This will run as admin if runPythonAsAdmin is successful
    print(path_to_script)
    psResult = subprocess.Popen([r'powershell.exe',
                                 '-ExecutionPolicy',
                                 'Unrestricted',
                                 path_to_script,
                                 ],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
    psResult.communicate()


def rebuild_commands_file():
    if os.path.exists("Input/commands.json"):
        os.remove("Input/commands.json")
    f = open("Input/commands.json", "w")

    if os.path.exists("Output/script.ps1"):
        os.remove("Output/script.ps1")
    f = open("Output/script.ps1", "w")

    if os.path.exists("Output/output.tmp"):
        os.remove("Output/output.tmp")
    f = open("Output/output.tmp", "w")


path_to_script = get_path_to_script()
path_to_output = get_path_to_output()
