import time

import paths
from all_commands import return_command
from json_builder import add_action_RLE_json
from utils import *
from textx import metamodel_from_file
from paths import *

rle_mm = metamodel_from_file('rle.tx')
rle_model = rle_mm.model_from_file('.//Input//input.rbt')

total_steps = 0
feasibility_formula = ""
run_script = False
ps1_filename = ""
json_filename = ""


class Program(object):
    def __init__(self):
        self.actions = []

    def __str__(self):
        return f"Program is loading..."

    def interpret(self, model):
        # model is an instance of Program

        # Prints available actions and commands associated
        # for action in data['actions']:
        #     print(action['action_name'])
        #     print(return_command(action['action_name']))

        # If "run" command is issued, make sure to search for the script and run it
        if model.__class__.__name__ == 'RunFile':
            print("Running " + model.filename)
            global run_script
            run_script = True
            """ What happens when requested to run script
                1. Run ps script and go straight to checking output and update json
                2. Run from json and update it 
                ???
            """
            global ps1_filename, json_filename
            ps1_filename = paths.ps1_path + model.filename + ".ps1"
            json_filename = paths.json_path + model.filename + ".json"

            # On each new run, rebuild commands + output + script file
            cleanup_files(path=paths.expected_output_path)
            cleanup_files(path=paths.script_output_path)
            cleanup_files(path=paths.final_path)
            # Write file to be checked against powershell script output
            write_expected_output(json_filename=json_filename)

        else:
            for c in model.commands:
                # print(c.__class__.__name__)
                if c.__class__.__name__ == "EXECUTE_ORDER":
                    global feasibility_formula
                    feasibility_formula = c.target
            global total_steps
            total_steps = model.number

            print("Saving " + model.filename)
            time.sleep(1)

            ps1_filename = paths.ps1_path + model.filename + ".ps1"
            json_filename = paths.json_path + model.filename + ".json"

            # On each new run, rebuild commands + output + script file
            cleanup_files(path=json_filename)
            cleanup_files(path=ps1_filename)
            cleanup_files(path=paths.final_path)
            cleanup_files(path=paths.expected_output_path)
            cleanup_files(path=paths.script_output_path)

            # Write powershell script
            write_powershell_prefix(ps1_filename)
            for s in model.steps:
                cmd = return_command(s.command.__class__.__name__, s.command.target)
                add_action_RLE_json(json_filename, s.id, s.command.__class__.__name__, s.command.target, cmd,
                                    s.command.expect)
                write_to_script(ps1_filename, string_to_write=cmd, step_id=s.id, command=s.command.__class__.__name__)
            write_powershell_suffix(ps1_filename)

            # Write file to be checked against powershell script output
            write_expected_output(json_filename=json_filename)

            # Save additional info in json file
            with open(json_filename, "r") as f:
                json_data = json.load(f)

            json_data['additional_info'] = {
                "total_steps": total_steps,
                "feasibility_formula": feasibility_formula
            }

            with open(json_filename, "w") as outfile:
                outfile.write(json.dumps(json_data, indent=4))


if __name__ == '__main__':
    print("Starting Checker...")
    if not is_admin():
        print("Not Admin")
    else:
        # Read input file and parse through DSL
        program = Program()
        program.interpret(rle_model)
        with open(json_filename, "r") as f:
            data = json.load(f)
        runPythonAsAdmin(data['additional_info']['total_steps'], data['additional_info']['feasibility_formula'],
                         ps1_filename, json_filename)